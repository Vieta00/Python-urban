# -*- coding: utf-8 -*-
"""Копия блокнота "Template_PythonUrban_kgiop_objects.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Bo7YcpbfUiydR4v8q2WVESVl9I9T0aQ

# Итоговый проект. Улицы. Объекты культурного наследия.

С помощью команды !pip устанавливаю необходимые для работы библиотеки
"""

!pip install folium -U
!pip install geopandas mapclassify osmnx

"""Импортирую библиотеки, которые не входят в стандартный набор"""

import osmnx as ox
import pandas as pd
import geopandas as gpd

pd.options.plotting.backend = "plotly"

"""Ввожу константы, которые на протяжении всего проекта не меняются"""

TILES = "CartoDB positron"

TERRITORY_NAME = 'Приморский район, Санкт-Петербург'
STREETS_FILE_URL = "https://drive.google.com/file/d/1bUT1E-QSbG1vpSNM2dOG2-LEVXSrPdo3/view?usp=sharing"
KGIOP_FILE_URL = "https://raw.githubusercontent.com/Vieta00/Python-urban/main/kgiop_objects.geojson"

"""Выношу функцию, которая возвращает ссылку для скачивания улиц"""

def get_google_drive_download_url(url: str) -> str:
    """
    Функция возвращает ссылку для скачивания с google drive.
     Например: "https://drive.google.com/file/d/1MWGOuqV76e0ubQOg8Ke0KTU3yGpkprHp/view?usp=sharing" ->
     "https://drive.google.com/uc?export=download&id=1MWGOuqV76e0ubQOg8Ke0KTU3yGpkprHp"
    """
    drive_id = url.split("/")[5]
    return f"https://drive.google.com/uc?export=download&id={drive_id}"

"""## Территория

### Загрузка территории из OSM (Extract)

С помощью !pip устанавливаю библиотеку osmnx 
(уже делала это раньше)
"""

!pip install osmnx

"""Импортирую библиотеку osmnx как ox"""

import osmnx as ox

"""Подгружаю с OSM GeoDataFrame по Приморсому району"""

TERRITORY_NAME = 'Приморский район, Санкт-Петербург'

territory = ox.geocode_to_gdf(TERRITORY_NAME)
territory.explore(tiles = "CartoDB positron")

"""### Обработка данных с территорией (Transform)

Удаляю лишние даннные с карты, оставляю только "Название территории"
"""

territory = territory.drop(['bbox_north', 'bbox_south', 'bbox_east', 'bbox_west', 'place_id', 'osm_type', 'osm_id', 'lat', 'lon', 'class', 'type', 'importance'], axis = 1)
territory.rename(columns = {'display_name' : 'Название территории'}, inplace = True)
territory.explore(tiles = "CartoDB positron")

"""## Улицы

### Загрузка файла с улицами из google disk (Extract)

Загружаю файл с улицами с google disk и фильтрую их по маске геометрии района
"""

STREETS_FILE_URL = "https://drive.google.com/file/d/1bUT1E-QSbG1vpSNM2dOG2-LEVXSrPdo3/view?usp=sharing"
url = get_google_drive_download_url(STREETS_FILE_URL)
gdf_streets = gpd.read_file(url, mask=territory)
gdf_streets

"""### Обработка данных с улицами (Transform)

С помощью json_normalize преобразавала структуру таблицы, сделав её более подробной
"""

tags = pd.json_normalize(gdf_streets["tags"])
tags

"""С помощью info вызваю информацию о данных таблицы"""

tags.info(1)

"""Из всех тегов оставляю только name, прикрепляю его к улицам с помощью join"""

extract_tags = [
    "name",
]

gdf_streets = gdf_streets.join(tags[extract_tags])
gdf_streets

"""С помощью dropna удаляю строки, в которых отсутствует name"""

gdf_streets.dropna(
    how="all",  # удалить если отсутствуют значения во всех указанных столбцах
    subset=["name"],  # столбцы, в которых надо искать пропуски
    inplace=True
)
gdf_streets

"""Проверяю наличие дубликатов"""

gdf_streets.duplicated(subset=["id", "geometry", "name"]).value_counts()

"""Проверяю уникальны ли названия улиц"""

gdf_streets["name"].is_unique

"""Поскольку названияулиц не уникальны группирую их с помощью метода dissolve по столбцу name"""

gdf_streets = gdf_streets.dissolve(by="name")
gdf_streets

"""Переименовываю название столбца name в "Название улицы""""

gdf_streets.index.rename("Название улицы", inplace=True)
gdf_streets.head()

"""Удаляю ненужные столбцы"""

drop_columns = [
    "id",
    "type", 
    "tags",
]
gdf_streets.drop(columns=drop_columns, inplace=True)
gdf_streets.head()

gdf_streets.explore(tiles="CartoDB positron")

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия

Загружаю объекты культурного наследия (данные КГИОП)
"""

KGIOP_FILE_URL = "https://raw.githubusercontent.com/Vieta00/Python-urban/main/kgiop_objects.geojson"

gdf_kgiop_objects = gpd.read_file(KGIOP_FILE_URL, mask=territory)
gdf_kgiop_objects

"""Удаляю ненужные столбцы"""

gdf_kgiop_objects = gdf_kgiop_objects.drop(['id', 'ensemble_name', 'occurrence_time', 'historical_category', 'normative_act'], axis = 1)

"""Переименовываю названия столбцов на русский"""

gdf_kgiop_objects.rename(columns = {'object_name' : 'Наименование','object_location' : 'Расположение', 'object_type' : 'Тип объекта'}, inplace = True)
gdf_kgiop_objects.head()

gdf_kgiop_objects.explore(tiles = "CartoDB positron")

"""С помощью функции считаю кол-во ОКН, попадающих в буффер улицы"""

STREET_BUFFER = 100

def get_contains_kgiop_objects(street) -> int:
    """ Функция для подсчета количества объектов культурного наследия попадающих в буффер улицы"""
    return sum(gdf_kgiop_objects["geometry"].within(street.buffer(STREET_BUFFER)))


gdf_streets["contains_kgiop_objects"] = gdf_streets["geometry"].apply(get_contains_kgiop_objects)
gdf_streets.nlargest(5, "contains_kgiop_objects")

"""Визуализирую"""

gdf_streets.explore("contains_kgiop_objects", tiles = "CartoDB positron")

"""Считаю плотность ОКН на м улицы в Приморском районе"""

gdf_streets["density"] = gdf_streets["contains_kgiop_objects"] / gdf_streets.length

select_columns = []
gdf_streets.nlargest(5, "density")

"""Переименовываю название столбцов на русские"""

gdf_streets.rename(columns = {'contains_kgiop_objects' : 'Кол-во ОКН', 'density' : 'Плотность'}, inplace = True)
gdf_streets.head()

"""Объединяю улицы с ОКН с границами Приморского района и визуализирую"""

m = gdf_streets.explore('Кол-во ОКН', tiles = "CartoDB positron")
m = territory.explore(m = m, style_kwds = {"fill": False, "weight": 5})

m

"""Сохраняю в geojson"""

gdf_streets.to_file('streets_with_contains_kgiop.geojson', driver='GeoJSON')

"""Нахожу среднюю плотность"""

len(gdf_kgiop_objects) / gdf_streets.length.sum() # средняя плотность

"""Считаю статистические данные"""

gdf_streets['Кол-во ОКН'].describe()

"""Рисую график распределения ОКН по улицам Приморского района"""

gdf_streets['Кол-во ОКН'].sort_values(ascending=False).plot.bar()

"""Общее количество объектов культурного наследия в Приморском районе составляет 126 шт.
Самое большое количесво объектов культурного наследия расположено на Приморском проспекте.
Топ 5 улиц:
Приморский проспект, Липовая аллея, Граничная улица, Центральная дорога, Красногвардейский переулок и улица Коммунаров.
Среднее количество объектов культурного наследия на одну улицу равно 0,3.
"""